type: edu
files:
- name: src/search/Main.kt
  visible: true
  text: |
    @file:Suppress("UNUSED_EXPRESSION")

    package search

    import java.io.File
    import java.io.IOException

    fun main(args: Array<String>) {
        val debugging = false
        if(!debugging)
            Interpreter.processArguments(args.toMutableList())
        while(debugging) {
            print("args: ")
            val arguments = mutableListOf<String>()
            arguments.addAll(readLine()!!.split(" "))
            Interpreter.processArguments(arguments)
            if(arguments[0] == "done")
                break
        }
        var repeat = true
        while(repeat)
            repeat = Interpreter.userMenuLoop()
        println()
        println("Bye!")
    }

    object Interpreter {

        fun processArguments(args: MutableList<String>) {
            if (args.size == 1)
                when (args[0]) {
                    "--data" -> true
                    else -> println("'${args[0]}' is unknown command.")
                }
            if (args.size == 2)
                when (args[0]) {
                    "--data" -> readInputFile(args[1])
                    else -> println("'${args[1]}' is unknown command.")
                }
        }

        fun userMenuLoop():Boolean {
            println("")
            println("=== Menu ===")
            println("1. Find a person")
            println("2. Print all people")
            println("0. Exit")
            //print("> ")
            when(readln()) {
                "1" -> findPerson(InputMatrix.content)
                "2" -> printAllPeople(InputMatrix.content)
                "0" -> return false
                else -> println("\nIncorrect option! Try again.")
            }
            return true
        }

        fun readInputFile(name: String) {
            val rootDirectory = File(System.getProperty("user.dir"))
            try {
                val lines = File(rootDirectory.absolutePath + "\\" +name).readLines()
                for(line in lines)
                    InputMatrix.content.add(line.split(' '))
            }
            catch (e: IOException)  {
                println("Can't read input file!")
            }
        }

        fun findPerson(inputMatrix: MutableList<List<String>>) {
            println()
            println("Enter a name or email to search all suitable people.")
            //print("> ")
            val termToSearch = readLine()!!
            val searchResults = searchForInputLinesThatContainTheTerm(termToSearch, inputMatrix)
            if (searchResults.isNotEmpty())
                for (line in searchResults)
                    println(line)
            else
                println("No matching people found.")
        }

        fun printAllPeople(inputMatrix: MutableList<List<String>>) {
            println("")
            println("=== List of people ===")
            for(line in inputMatrix)
                println(line.joinToString(" "))
        }

        fun searchForInputLinesThatContainTheTerm(
                term:String,
                inputs:List<List<String>>
        ):List<String> {
            val results = mutableListOf<String>()
            for(line in inputs)
                for(item in line)
                    if(item.contains(term, ignoreCase = true)) {
                        results.add(line.joinToString(" "))
                        break
                    }
            return results
        }
    }

    object InputMatrix {
        val content = mutableListOf(listOf<String>())
    }
  learner_created: false
- name: test/SearchEngineTests.java
  visible: false
  text: |
    public class SearchEngineTests {
        public static final String NAMES = "Kristofer Galley\n" +
            "Fernando Marbury fernando_marbury@gmail.com\n" +
            "Kristyn Nix nix-kris@gmail.com\n" +
            "Regenia Enderle\n" +
            "Malena Gray\n" +
            "Colette Mattei\n" +
            "Wendolyn Mcphillips\n" +
            "Jim Gray\n" +
            "Coreen Beckham\n" +
            "Bob Yeh bobyeah@gmail.com\n" +
            "Shannan Bob stropeshah@gmail.com\n" +
            "Yer Fillion\n" +
            "Margene Resendez marres@gmail.com\n" +
            "Blossom Ambler\n" +
            "Teri Ledet teri_ledet@gmail.com\n" +
            "Dana Baron baron@gmail.com\n" +
            "Abram Goldsberry\n" +
            "Yer Leopold\n" +
            "Stefania Trunzo\n" +
            "Alexis Leopold\n" +
            "Carlene Bob\n" +
            "Oliver Dacruz\n" +
            "Jonie Richter\n" +
            "Pasquale Gallien gallien@evilcorp.com\n" +
            "Verdie Gentle\n" +
            "Gerardo Strouth gallien@evilcorp.com\n" +
            "Agripina Bob\n" +
            "Latricia Niebuhr\n" +
            "Malena Schommer\n" +
            "Drema Leopold\n" +
            "Heide Payeur\n" +
            "Ranae Digiovanni\n" +
            "Simona Pereira\n" +
            "Nick Digiovanni\n" +
            "Angelita Wigington gallien@evilcorp.com\n" +
            "Elin Gray\n" +
            "Dwain Trunzo\n" +
            "Boris Beiler\n" +
            "Remi Malek fsociefy@gmail.com\n" +
            "Demetria Hostetler gallien@evilcorp.com\n" +
            "Nydia Mcduffie\n" +
            "Florencio Defibaugh\n" +
            "Warner Giblin\n" +
            "Bob Mans\n" +
            "Shu Gray\n" +
            "Kaycee Gray\n" +
            "Victorina Froehlich victory@gmail.com\n" +
            "Roseanne Gray\n" +
            "Erica Radford hisam@gmail.com\n" +
            "Elyse Pauling";
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>().setAttach(
                    new TestClue("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")).setInput("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES),


                new TestCase<TestClue>().setAttach(new TestClue("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")).setInput("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES)
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i).toLowerCase());
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        List<Integer> result = new ArrayList<>();

                        List<String> intendedResult = new ArrayList<>();

                        while (true) {
                            String mode = inputLines[currentInputLine].trim().toLowerCase();
                            currentInputLine++;

                            String toSearch = "";

                            if (mode.equalsIgnoreCase("all")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (!(s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck))) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("any")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = false;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = true;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("none")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            }
                        }

                        String[] userResult = new String[intendedResult.size()];
                        for (int i = 0; i < intendedResult.size(); i++) {
                            try {
                                userResult[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutput = intendedResult.toArray(new String[0]);

                        Arrays.sort(correctOutput);
                        Arrays.sort(userResult);

                        if (!Arrays.equals(correctOutput, userResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }
                        break;
                    case 2:
                        currentInputLine++;

                        List<String> intendedResultAll = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            intendedResultAll.add(s);
                        }

                        String[] userResultAll = new String[intendedResultAll.size()];
                        for (int i = 0; i < intendedResultAll.size(); i++) {
                            try {
                                userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutputAll = intendedResultAll.toArray(new String[0]);

                        Arrays.sort(correctOutputAll);
                        Arrays.sort(userResultAll);

                        if (!Arrays.equals(correctOutputAll, userResultAll)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }
  learner_created: false
- name: src/names.txt
  visible: true
  text: |-
    Kristofer Galley
    Fernando Marbury fernando_marbury@gmail.com
    Kristyn Nix nix-kris@gmail.com
    Regenia Enderle
    Malena Gray
    Colette Mattei
    Wendolyn Mcphillips
    Jim Gray
    Coreen Beckham
    Bob Yeh bobyeah@gmail.com
    Shannan Strope stropeshah@gmail.com
    Yer Fillion
    Margene Resendez marres@gmail.com
    Blossom Ambler
    Teri Ledet teri_ledet@gmail.com
    Dana Baron baron@gmail.com
    Abram Goldsberry
    Yer Leopold
    Stefania Trunzo
    Alexis Leopold
    Carlene Pompa
    Oliver Dacruz
    Jonie Richter
    Pasquale Gallien gallien@evilcorp.com
    Verdie Gentle
    Gerardo Strouth gallien@evilcorp.com
    Agripina Dones
    Latricia Niebuhr
    Malena Schommer
    Drema Leopold
    Heide Payeur
    Ranae Digiovanni
    Simona Pereira
    Nick Digiovanni
    Angelita Wigington gallien@evilcorp.com
    Elin Gray
    Dwain Trunzo
    Boris Beiler
    Remi Malek fsociefy@gmail.com
    Demetria Hostetler gallien@evilcorp.com
    Nydia Mcduffie
    Florencio Defibaugh
    Warner Giblin
    May Mans
    Shu Gray
    Kaycee Gray
    Victorina Froehlich victory@gmail.com
    Roseanne Gray
    Erica Radford hisam@gmail.com
    Elyse Pauling
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7822#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Mon, 10 Apr 2023 15:28:46 UTC"
record: -1
